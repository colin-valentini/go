// This file is the server implementation of the stubs generated by the proto
// compiler.

package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net"

	pb "github.com/colin-valentini/go/internal/proto/example"
	"google.golang.org/grpc"
)

// Check that the server implementation actually implements the gRPC interface.
var _ pb.HelloWorldServer = (*helloWorldServerImpl)(nil)

type helloWorldServerImpl struct {
	pb.UnimplementedHelloWorldServer
}

func newServer() *helloWorldServerImpl {
	return &helloWorldServerImpl{}
}

func (s *helloWorldServerImpl) GetGreeting(
	ctx context.Context, req *pb.GreetingRequest,
) (*pb.GreetingResponse, error) {
	log.Printf("Handling GetGreeting request with id: %d", req.GetId())
	return &pb.GreetingResponse{Message: "Ciao mondo!"}, nil
}

var port = flag.Int("port", 50051, "The server port")

func main() {
	flag.Parse()
	lis, err := net.Listen("tcp", fmt.Sprintf("localhost:%d", *port))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	var opts []grpc.ServerOption
	log.Println("Constructing server instance...")
	grpcServer := grpc.NewServer(opts...)
	log.Println("Registering server instance...")
	pb.RegisterHelloWorldServer(grpcServer, newServer())
	log.Println("Starting server...")
	grpcServer.Serve(lis)
}
