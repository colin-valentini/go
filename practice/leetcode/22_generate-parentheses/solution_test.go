package generateparentheses

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSolver(t *testing.T) {
	testCases := []struct {
		n    int
		want []string
	}{
		{n: 1, want: []string{
			"()",
		}},
		{n: 2, want: []string{
			"()()",
			"(())",
		}},
		{n: 3, want: []string{
			"()()()",
			"()(())",
			"(()())",
			"(())()",
			"((()))",
		}},
		{n: 4, want: []string{
			"()()()()",
			"()()(())",
			"()(())()",
			"()(()())",
			"()((()))",
			"(())()()",
			"(())(())",
			"(()())()",
			"(()()())",
			"(()(()))",
			"((()))()",
			"((())())",
			"((()()))",
			"(((())))",
		}},
		{n: 5, want: []string{
			"()()()()()",
			"()()()(())",
			"()()(())()",
			"()()(()())",
			"()()((()))",
			"()(())()()",
			"()(())(())",
			"()(()())()",
			"()(()()())",
			"()(()(()))",
			"()((()))()",
			"()((())())",
			"()((()()))",
			"()(((())))",
			"(())()()()",
			"(())()(())",
			"(())(())()",
			"(())(()())",
			"(())((()))",
			"(()())()()",
			"(()())(())",
			"(()()())()",
			"(()()()())",
			"(()()(()))",
			"(()(()))()",
			"(()(())())",
			"(()(()()))",
			"(()((())))",
			"((()))()()",
			"((()))(())",
			"((())())()",
			"((())()())",
			"((())(()))",
			"((()()))()",
			"((()())())",
			"((()()()))",
			"((()(())))",
			"(((())))()",
			"(((()))())",
			"(((())()))",
			"(((()())))",
			"((((()))))",
		}},
	}
	for i, testCase := range testCases {
		solver := NewSolver(testCase.n)
		got := solver.Solve()
		assert.ElementsMatch(t, testCase.want, got, "Failed test case %d", i+1)
	}
}

func BenchmarkSolver(b *testing.B) {
	for n := 0; n < b.N; n++ {
		_ = NewSolver(10).Solve()
	}
}
